{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAoB5C,OACQ,sBAAMC,SAZO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAOd,SACK,uBACGO,KAAK,OACLC,MAAOT,EACPU,SArBK,SAACP,GAElBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAWH,GAD9C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGKA,EAAIC,OAHT,uBAGVC,EAHU,EAGVA,KAEHC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QC0BFO,EA7BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAGHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDd2BK,CAAc1B,GAAlCa,EAHgB,EAGtBN,KAAca,EAHQ,EAGRA,QAOtB,OACI,gCACI,oBAAIJ,UAAU,wCAAd,SAAwDhB,IACtDoB,GAAW,mBAAGJ,UAAU,mCAAb,0BACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEUA,GADCA,EAAIC,aEYvBgB,MA9Bf,WAAyB,IAAD,EAEgBzC,mBAAS,CAAC,kBAF1B,mBAEb0C,EAFa,KAED3C,EAFC,KAUpB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,YCnBlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fba35520.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        //console.log(e.target.value);\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories( cat => [inputValue, ...cat]);\r\n            setinputValue('');\r\n        }\r\n        //console.log('Submit Echo');\r\n       \r\n    }\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                 <input \r\n                    type=\"text\" \r\n                    value={inputValue}\r\n                    onChange={handleChange}\r\n                />\r\n            </form>\r\n           \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=PAtcXOLVrhXGcrj9QlpnQ7g48L2m7mrd`;\r\n    const res = await fetch(url);\r\n    const {  data } = await res.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    // console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // const [images, setimages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setimages );\r\n    // }, [category]);\r\n\r\n    return (\r\n        <div>\r\n            <h3 className=\"animate__animated animate__fadeInLeft\">{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\"> Loading ...</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                       <GifGridItem\r\n                            key={ img.id }\r\n                            { ...img }\r\n                       />\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                //console.log(imgs);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category]);\r\n\r\n    return state; //{ data:[], loading: true }\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nfunction GifExpertApp() {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball Z']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     // setCategories(['New category', ...categories]);\r\n    //     setCategories( cat => [...categories, 'New category']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}